<?php

namespace Tests\Unit;

use App\Http\Repositories\LetterRepository;
use App\Models\Letter;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class LetterRepositoryTest extends TestCase
{
    use HasFactory;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        if (count(Letter::all()) === 0) {
            Letter::factory(1)->create();
        }
    }

    public function test_show_common() {

        $letterRepository = resolve(LetterRepository::class);
        $last = DB::table('letter')->latest()->first();
        // обычный случай
        $letterArray = $letterRepository->show($last->id, ["*"])->attributesToArray();
        $result = array_keys($letterArray) == array_keys(get_object_vars($last))
            && $last->id == $letterArray['id'];

        $this->assertTrue(boolval($result));
    }

    public function test_show_fields() {

        $letterRepository = resolve(LetterRepository::class);
        $last = DB::table('letter')->latest()->first();

        // случай когда надо получить определенные поля
        $letterArray = $letterRepository->show($last->id, ["name", "email", "text"])->attributesToArray();

        $result = $letterArray['name'] == $last->name
            && $letterArray['email'] == $last->email
            && $letterArray['text'] == $last->text
            && array_keys($letterArray) == ["name", "email", "text"];

        $this->assertTrue(boolval($result));
    }

    public function test_show_images() {

        // получить ссылки на изображения
        $letterRepository = resolve(LetterRepository::class);
        $last = DB::table('letter')->latest()->first();

        $letterArray = $letterRepository->showOnlyImages($last->id)->attributesToArray();
        $result = array_keys($letterArray) == ["images"];

        $this->assertTrue(boolval($result));
    }

    public function test_find() {

        $letterRepository = resolve(LetterRepository::class);

        $letters = $letterRepository->find();
        $result = array_keys($letters->items()[0]->toArray()) == ["name", "email"];

        $this->assertTrue(boolval($result));
    }
}
